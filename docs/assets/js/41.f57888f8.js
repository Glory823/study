(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{212:function(n,t,a){"use strict";a.r(t);var e=a(0),s=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数","aria-hidden":"true"}},[n._v("#")]),n._v(" 函数")]),n._v(" "),a("ol",[a("li",[n._v("函数的概念")])]),n._v(" "),a("p",[n._v("函数是指由事件驱动或可重复调用执行的代码块。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('btn.onclick = function(){\n    alert("OK");\n}\nfunction runYear( min , max ){\n    for(var i=min;i<=max;i++){\n        if( i%4 == 0 && i%100 != 0 || i%400 == 0 ){\n            document.write( i + " " );\n        }\n    }\n}\nrunYear( 2000 , 3000 );\ndocument.write("<hr />");\nrunYear( 3000 , 4000 );\n')])])]),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[n._v("函数的好处")]),n._v(" "),a("p",[n._v("一次声明多次调用 ==> 节省代码量 ==> 执行效率提高 ==> 页面加载速度提高 ==> 用户体验提高")])]),n._v(" "),a("li",[a("p",[n._v("定义函数的关键字 ==> function")])])]),n._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[a("p",[n._v("函数分为")]),n._v(" "),a("ul",[a("li",[n._v("有名函数")]),n._v(" "),a("li",[n._v("匿名函数")])])]),n._v(" "),a("li",[a("p",[n._v("定义函数的两种方式")]),n._v(" "),a("ul",[a("li",[n._v("函数表达式 ==> 将一个匿名函数赋值给一个变量")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('var num = 10; // num ==> 变量名\nvar fn = function(){ // fn ==> 函数名\n    alert("OK");\n};\n\n// 构造函数: var fn = new Function();\n')])])]),a("ul",[a("li",[n._v("函数声明 ==> 使用最多")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('语法结构 ==> function funName(){ }\n    function fn(){\n        alert("OK");\n    }\n')])])])]),n._v(" "),a("li",[a("p",[n._v("函数表达式和函数声明的区别")]),n._v(" "),a("ul",[a("li",[n._v("函数表达式:先定义后调用 ==> 先调用,报错")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("fn();// 报错:fn is not a function\nvar fn = function(){};\nfn();// 成功执行\n")])])]),a("ul",[a("li",[n._v("函数声明:无论在哪调用都能成功执行 ==> 函数声明有提升的过程")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("fn();// 成功执行\nfunction fn(){}\nfn();// 成功执行\n")])])])]),n._v(" "),a("li",[a("p",[n._v("函数调用( 执行函数 ) ==> 函数名( 实参 1,实参 2... )")])]),n._v(" "),a("li",[a("p",[n._v("函数参数")]),n._v(" "),a("ol",[a("li",[n._v("实参 ==> 真实参数")]),n._v(" "),a("li",[n._v("形参 ==> 形式参数\n规则:\n"),a("ul",[a("li",[n._v("实参与形参是一一对应的 。")]),n._v(" "),a("li",[n._v("如果形参没有接收到传递进来的实参,该形参默认保存 undefined ==>\n声明变量但未赋值。")]),n._v(" "),a("li",[n._v("形参是局部变量,当函数执行完毕会自动销毁。")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function addNum( num1 , num2 , num3 ){ // num1,num2 形参 num1 = 10,num2 = 20\n  console.log( num1 );// 10 ==> 规则 1\n  console.log( num2 );// 20 ==> 规则 1\n  console.log( num1 + num2 );// 30\n  console.log( num3 );//undefined ==> 规则 2\n}\naddNum( 10 , 20 );// 10 , 20 实参\nconsole.log( num1 );// 报错:num1 is not defined ==> 规则 3\n")])])])])])])]),n._v(" "),a("ol",{attrs:{start:"9"}},[a("li",[a("p",[n._v("return\n规则:")]),n._v(" "),a("ul",[a("li",[n._v("return 有返回值的功能,将值返回到调用函数的那个地方")]),n._v(" "),a("li",[n._v("return 后的代码将不会被执行 ==> return 有终止函数的功能 ==> 类似循环语句的 break")]),n._v(" "),a("li",[n._v("每一个函数都有返回值,没有用 return 或者用了 return 但什么都没返回,默认返回 undefined")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('function addNum( num1 , num2 ){\n    return num1 + num2;\n    alert("OK");// 不会执行\n}\nvar sum = addNum( 10 , 20 );\nconsole.log( sum );// 30\nconsole.log( addNum( 10 , 20 ) );// 30\n')])])])]),n._v(" "),a("li",[a("p",[n._v("使用 return 的情况")]),n._v(" "),a("ul",[a("li",[n._v("当需要返回值的时候就需要使用 return")]),n._v(" "),a("li",[n._v("当需要强制结束函数时 需要使用 return")]),n._v(" "),a("li",[n._v("修改页面的样式时,就不需要使用 return")])])]),n._v(" "),a("li",[a("p",[n._v("arguments ==> arguments 是对象,以数组的形式保存着实参的集合,但它并不是数组的实例\n用途:解决传递多个参数")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('arguments.length ==> 传递实参的个数\nfunction addNum(){\n    //_console.log( arguments );// [10,20,30]\n    console.log( typeof arguments );//"object"\n    // 数组的第一项 ==> 第一个实参\n    console.log( arguments[0] );// 10\n    // arguments.length ==> 实参的个数\n    console.log( arguments.length );// 3\n    var sum = 0;\n    for(var i=0;i<arguments.length;i++){\n        sum += arguments[i];\n    }\n    return sum;\n}\nvar sum = addNum( 10 , 20 , 30 , 40 , 50 , 60 )\nconsole.log( sum );\n// 面试题\nfunction fn( num1 , num2 ){\n    arguments[0] = 50;\n    console.log( num1 );// 50\n}\nfn( 10 , 20 );\n')])])])]),n._v(" "),a("li",[a("p",[n._v("JS 没有函数重载 ==> 后声明的函数会覆盖先声明的函数")])])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    fn();\n    function fn(){\n        alert(1);\n    }\n\n    function fn(){\n        alert(2);\n    }\n")])])]),a("ol",{attrs:{start:"13"}},[a("li",[n._v("模拟函数重载 ==> 多态")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    arguments.length ==> 传递实参的个数\n    function fn(){\n        if( arguments.length == 1 ){\n            alert( arguments[0] );\n        }else if( arguments.length == 2 ){\n            alert( arguments[0] + arguments[1] );\n        }\n    }\n    fn( 10 );\n    fn( 10 , 20 );\n")])])]),a("ol",{attrs:{start:"14"}},[a("li",[n._v("函数是对象,函数名是指针")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    function fn(){\n        alert("ok");\n    }\n    console.log( typeof fn );// "function"\n    console.log( fn instanceof Function );// true\n    console.log( fn instanceof Object );// true\n\n    function sum( num1 , num2 ){\n        return num1 + num2;\n    }\n    console.log( sum( 10 , 20 ) );// 30\n    var anotherSum = sum;\n    console.log( anotherSum( 20 , 30 ) );// 50\n\n    sum = null;// 解除了 sum 与函数体的指引\n    // console.log( sum( 10 , 20 ) );// 报错:sum is not a function\n    console.log( anotherSum( 10 , 20 ) );//30\n')])])]),a("ol",{attrs:{start:"15"}},[a("li",[n._v("this ==> 上下文\nthis 是指包含他的函数 作为方法被调用时 所属的对象"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("btn.onclick = function(){\n    console.log( this );// btn\n}\n")])])])]),n._v(" "),a("li",[n._v("闭包 ==> 函数里有函数\n有权访问另外一个作用域的函数")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    function fn(){\n        var num = 10;\n        return function(){\n            return num;\n        };\n    }\n    console.log( fn()() );// 10\n\n    // 匿名函数的自我执行\n    (function(num1,num2){\n        alert(num1+num2);\n    })(10,20);\n    /*(function(){\n        alert("ok");\n    }());*/\n')])])])])}],!1,null,null,null);t.default=s.exports}}]);